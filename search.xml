<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[iOS常见访问地址]]></title>
    <url>%2F2018%2F10%2F15%2FiOS%E5%B8%B8%E8%A7%81%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80%2F</url>
    <content type="text"><![CDATA[appleID登录地址https://appleid.apple.com/ 苹果开发者账号https://developer.apple.com/account/#/overview/G9AP62BQZD 购买688元套餐地址https://developer.apple.com/enroll/cn 苹果上架App 管理地址https://appstoreconnect.apple.com/ 苹果iTunes下载地址https://itunes.apple.com/cn/genre/ios/id36?mt=8 苹果开源源码地址https://opensource.apple.com/tarballs/]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS App扫码下载]]></title>
    <url>%2F2018%2F10%2F14%2FiOS%20App%E6%89%AB%E7%A0%81%E4%B8%8B%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[目标: 通过扫二维码下载App,可以通过蒲公英,也很简单明了,这里我们自己打架服务器来支持扫码下载 第一步 准备一个https的服务器本人是腾讯云的账户,搭建了https的环境 怎么搭建可以访问腾讯云 云+社区 开发者实验室 ,搜索ssl 第二步 打包,准备plist打包生成ipa包, 貌似只有在开发者账户里面的用户可以安装,其他用户最后校验失败会导致安装失败 准备plist12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;&lt;plist version=&quot;1.0&quot;&gt;&lt;dict&gt; &lt;key&gt;items&lt;/key&gt; &lt;array&gt; &lt;dict&gt; &lt;key&gt;assets&lt;/key&gt; &lt;array&gt; &lt;dict&gt; &lt;key&gt;kind&lt;/key&gt; &lt;string&gt;software-package&lt;/string&gt; &lt;key&gt;url&lt;/key&gt; &lt;string&gt;http://123.206.68.204:1111/maarrytask.ipa&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;kind&lt;/key&gt; &lt;string&gt;full-size-image&lt;/string&gt; &lt;key&gt;needs-shine&lt;/key&gt; &lt;false/&gt; &lt;key&gt;url&lt;/key&gt; &lt;string&gt;&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;kind&lt;/key&gt; &lt;string&gt;display-image&lt;/string&gt; &lt;key&gt;needs-shine&lt;/key&gt; &lt;false/&gt; &lt;key&gt;url&lt;/key&gt; &lt;string&gt;安装过程显示图片&lt;/string&gt; &lt;/dict&gt; &lt;/array&gt; &lt;key&gt;metadata&lt;/key&gt; &lt;dict&gt; &lt;key&gt;bundle-identifier&lt;/key&gt; &lt;string&gt;com.techotc.DigitSign&lt;/string&gt; &lt;key&gt;bundle-version&lt;/key&gt; &lt;string&gt;1.0&lt;/string&gt; &lt;key&gt;kind&lt;/key&gt; &lt;string&gt;software&lt;/string&gt; &lt;key&gt;title&lt;/key&gt; &lt;string&gt;packName&lt;/string&gt; &lt;key&gt;subtitle&lt;/key&gt; &lt;string&gt;副标题&lt;/string&gt; &lt;/dict&gt; &lt;/dict&gt; &lt;/array&gt;&lt;/dict&gt;&lt;/plist&gt; bundle-identifier 必须修改 title 必须修改,改成包名/或者修改名 bundle-version 最好也修改下 url 必须要修改,修改为域名下地址 display-image 一般需要修改为Logo的图片地址 上传到服务器本人上传到https的根目录 具体是/usr/share/nginx/html 通过mac的ssh远程拷贝过去 命令: scp /Users/yourname/Desktop/xxx.ipa root@123.206.68.xx:/usr/share/nginx/html/xx.ipa scp /Users/yourname/Desktop/xxx.plist root@123.206.68.xx:/usr/share/nginx/html/xx.plist 需要输入服务器root密码 配置修改将plist的url修改为https://yourdomain/xxx.ipa 测试直接访问 https://yourdomain/xxx.plist 检验是否可以直接访问 准备一个下载页面核心代码跳转的核心代码 1&lt;a href=&quot;itms-services://?action=download-manifest&amp;amp;url=https://yourdomain/xxx.plist&quot;&gt;点击下载&lt;/a&gt; 上传到服务器scp /Users/yourname/Desktop/download.html root@123.206.68.xx:/usr/share/nginx/html/download.html 生成二维码首先测试 https://yourdomain/download.html可以正常访问 使用草料二维码生成,也可以自己使用coreImage 参考文档https://blog.csdn.net/pzlsun/article/details/52080491 https://blog.csdn.net/klshuo/article/details/50485038]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Unity 学习(一)]]></title>
    <url>%2F2018%2F10%2F11%2FUnity%20%E5%AD%A6%E4%B9%A0(%E4%B8%80)%2F</url>
    <content type="text"><![CDATA[Unity 下载建议下载 个人版 https://store.unity.com/products/unity-personal?_ga=2.170905952.1914627832.1539259756-39692342.1530083881 Unity 启动 Unity 界面介绍 Unity 设置栏介绍Unity Unity PreferencesGeneral External Tool Color GI Cache 2D Cache Server File BuildSetting Asset 其他介绍坐标 其他]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动端游戏开发分析]]></title>
    <url>%2F2018%2F10%2F10%2F%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[现状分析公司现状项目结束后移动端会进入一段时间的休整期,有一定的时间和精力,公司的开发人员没有进行过游戏开发,不了解开发相关事项. 技术现状目前技术还未掌握,但是语言相关的基础已经有了,常见的游戏脚本语言有C / C++ , C# , javascript等 市场现状游戏市场永远没有饱和,但是游戏是有寿命的,一般的单机游戏盈利寿命最长是半年,网络游戏也是需要通过不断更新新的内容来维持用户的新鲜感,才能延续下去 好的游戏寿命一般较长,差的游戏说不定刚出来就死了. 移动端游戏是新兴市场,游戏质量一般只要过关,总有人玩,但是必须要有人去刷榜,保持下载量 技术选型语言选择了解C/C++ 或者了解 C# 语言基本语法 工具选择Unity优点: 简单易用,支持3D,2D,功能全面,资料众多,前端游戏首选 缺点: 资源占用较大,渲染较差,内存管理欠缺 团队模式收费 移动端对渲染要求较低,所以一般优先选择Unity Cocos2d-x优点: 简单,易用, 免费 缺点: 提升到3D表现一般,过时,现在社区不活跃 百度百科显示Cocos2d-x 占据高低端市场 超过70%,但是那已经是2013年的数据,这几年Unity的表现十分抢眼,优先选择Unity UE4优点: 渲染优秀,内存优化好,占用资源适中,工具免费 缺点: 学习稍微困难,学习资源少 学习完Unity如果需要进阶,我们可以直接切换到UE4,渲染效果会提升非常大,有Unity的基础,UE4也会非常好学 资源选择建议淘宝直接购买资源,或者选择maya制作资源 maya 下载目录 http://www.ifunmac.com/2017/10/maya-2018-1/maya 学习目录 https://huke88.com/route/maya.html?sem=baidu&amp;kw=106402 建议分工美术可以有专门的人研究下maya,maya现在也是傻瓜式建模 地图模型需要有人跟进 益智类需要关卡设计 需要有美工提供原图,或者淘宝购买原图,或者逆向别人的图 代码开发前期可以都投入,后期撤出研究其他内容]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Xcode Command工具开发]]></title>
    <url>%2F2018%2F10%2F10%2FXcode%20Command%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[目标: 编写一个swift语言的命令行工具,用于识别回文以及异构词 创建swift的CommandLineTool工程shift + command + N 选择 macOS -&gt; Application -&gt; Command Line Tool Swift 没有了传统的main 函数,但是有一个main.swift文件, main函数被隐藏了 创建命令行的输出通常命令行工具会将 执行的命令,标准的输出,错误信息打印在控制台 错误信息也会以特殊颜色展示在控制台,我们先编写一个输出流的打印工具 创建一个swift 文件, 名称为ConsoleIO.swift 内容填充如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546//// ConsoleIO.swift// FindPhone//// Created by WilliamJi on 2018/10/10.// Copyright © 2018年 WilliamJi. All rights reserved.// 基本输出工具类import Foundation// 输出类型enum OutputType &#123; case error case standard&#125;// 输出class ConsoleIO: NSObject &#123; // 输出信息,输出内容,和类型 // .standard选项使用print,会写入到stdout. .error选项会使用c函数fputs写入信息到全局并且指向标准错误流的stderr public func writeMessage(_ message: String, to: OutputType = .standard) &#123; switch to &#123; case .standard: print(&quot;\(message)&quot;) case .error: fputs(&quot;Error: \(message)\n&quot;, stderr) &#125; &#125; // 打印基本的信息 public func printUsage() &#123; let executableName = (CommandLine.arguments[0] as NSString).lastPathComponent writeMessage(&quot;usage:&quot;) writeMessage(&quot;\(executableName) -a string1 string2&quot;) writeMessage(&quot;or&quot;) writeMessage(&quot;\(executableName) -p string&quot;) writeMessage(&quot;or&quot;) writeMessage(&quot;\(executableName) -h to show usage information&quot;) writeMessage(&quot;Type \(executableName) without an option to enter interactive mode.&quot;) &#125; &#125; 创建一个执行类创建一个MainTask.swift, 填充内容如下 123456789101112131415161718//// MainTask.swift// FindPhone//// Created by WilliamJi on 2018/10/10.// Copyright © 2018年 WilliamJi. All rights reserved.// 工具的主要逻辑import Foundationclass MainTask &#123; let cons = ConsoleIO() func run() &#123; cons.printUsage() &#125; &#125; 在main.swift中执行 MainTask().run() 命令行参数一般命令行后面的参数分为两种: 一种是类似于 -p 的option属性,一种是string内容信息 首先设置option枚举类型12345678910111213141516171819202122// 选项卡枚举enum OptionType:String &#123; // 回文 case palindrome = &quot;p&quot; // 检测变位字 case anagram = &quot;a&quot; // 帮助 case help = &quot;h&quot; // 其他 case unknown // 创建枚举 init(value: String) &#123; switch value &#123; case &quot;a&quot;: self = .anagram case &quot;p&quot;: self = .palindrome case &quot;h&quot;: self = .help default: self = .unknown &#125; &#125; &#125; 修改MainTask.swift新增读取字符串option转换为枚举的方法 1234// 根据选项的字符串,返回一个元组,包括变换的枚举和本身 func getOption(_ option: String) -&gt; (option:OptionType, value: String) &#123; return (OptionType(value: option), option) &#125; 修改run方法 12345678910111213141516func run() &#123;// cons.printUsage() // 1. 获取参数的个数 let argc = CommandLine.argc // 2. 获取第1个参数 let argv1 = CommandLine.arguments[1] // 3. 获取option let (option,value) = getOption(argv1.replacingOccurrences(of: &quot;-&quot;, with: &quot;&quot;)) // 4. 打印option的内容和枚举 cons.writeMessage(&quot;Argument count: \(argc) Option: \(option) value: \(value)&quot;) &#125; 在main.swift中添加判断 12345if CommandLine.argc &lt; 2 &#123; //TODO: 少于2个参数开启交互模式&#125;else &#123; MainTask().run()&#125; 测试找到product中的mach-o 文件Test, open in finder查看,在终端下输入 ./Test -a 或者 在 Edit Scheme Run 中的 Arguments 的 Argument Passed On Launch 点击 + 号,新增一个参数 -p ,直接运行xcode即可 回文和变位词什么是回文: 回文就是从前往后和从后往前读都是一样的次 比如 noon level 什么是变位词 就是用其他的词里面每个字母变换位置获得的新词 silent &lt;-&gt; listen 我们需要检测回文和变位词新增一个StringExtension.swift类 1234567891011121314151617181920212223242526272829//// StringExtension.swift// FindPhone//// Created by WilliamJi on 2018/10/10.// Copyright © 2018年 WilliamJi. All rights reserved.// 字符串的扩展import Foundationextension String &#123; // 检测回文 func isPalindrome() -&gt; Bool &#123; // 小写去空格 let old = self.lowercased().replacingOccurrences(of: &quot; &quot;, with: &quot;&quot;) let new = String(old.reversed()) return old == new &#125; // 检测是否是异构词 func isAnagramOf(_ s: String) -&gt; Bool &#123; // 获取旧词的无空格小写内容 let old = self.lowercased().replacingOccurrences(of: &quot; &quot;, with: &quot;&quot;) // 获取新词的无空格小写内容 let new = s.lowercased().replacingOccurrences(of: &quot; &quot;, with: &quot;&quot;) // 重新排序并比较 return old.sorted() == new.sorted() &#125;&#125; 修改run方法12345678910111213141516171819202122232425262728293031323334353637383940414243 // 4. 打印option的内容和枚举// cons.writeMessage(&quot;Argument count: \(argc) Option: \(option) value: \(value)&quot;) // 4. 检测回文和构词法 switch option &#123; case .palindrome: // 检测回文 if argc != 3 &#123; if argc &gt; 3 &#123; cons.writeMessage(&quot;参数过多&quot;, to: .error) &#125;else&#123; cons.writeMessage(&quot;参数过少&quot;, to: .error) &#125; cons.printUsage() &#125;else &#123; let s = CommandLine.arguments[2] cons.writeMessage(&quot;\(s) \(s.isPalindrome() ? &quot;&quot; : &quot;不&quot;)是回文&quot;) &#125; break case .anagram: if argc != 4 &#123; if argc &gt; 4 &#123; cons.writeMessage(&quot;参数过多&quot;, to: .error) &#125;else&#123; cons.writeMessage(&quot;参数过少&quot;, to: .error) &#125; cons.printUsage() &#125;else&#123; let str1 = CommandLine.arguments[2] let str2 = CommandLine.arguments[3] cons.writeMessage(&quot;\(str2)\(str1.isAnagramOf(str2) ? &quot;&quot; : &quot;不&quot;)是\(str1)的异构词&quot;) &#125; break case .help: cons.printUsage() break default: cons.writeMessage(&quot;未知的参数&quot;) cons.printUsage() break &#125; 测试下方法同上 交互式获取内容12345678910111213// 输入提示内容,获取输入信息 func getInput(msg:String) -&gt; String &#123; // 0. 输出内容 self.writeMessage(msg) // 1. 获取键盘 let keyboard = FileHandle.standardInput // 2. 键盘获取的值 let inputData = keyboard.availableData // 3. 解析 let strData = String(data: inputData, encoding: String.Encoding.utf8)! // 4. 移除换行返回文字 return strData.trimmingCharacters(in: CharacterSet.newlines) &#125; 逻辑添加OptionType枚举中新增一个quit case quit = &quot;q&quot; 在init方法中新增 case &quot;q&quot;: self = .quit 在MainTask.swift新增函数 123456789101112131415161718192021222324252627func interactiveMode() &#123; cons.writeMessage(&quot;欢迎使用本系统,本系统检测回文以及异构体&quot;) var isFinish = false while !isFinish &#123; let (opt,val) = getOption(cons.getInput(msg: &quot;输入a 检测异构体, 输入p 检测回文,输入q 退出&quot;)) switch opt &#123; case .anagram: let fir = cons.getInput(msg: &quot;输入第一个单词&quot;) let sec = cons.getInput(msg: &quot;输入第二个单词&quot;) cons.writeMessage(&quot;\(fir)和\(sec) \(fir.isAnagramOf(sec) ? &quot;&quot; : &quot;不&quot;)是异构体&quot;) break case .palindrome: let value = cons.getInput(msg: &quot;请输入单词&quot;) cons.writeMessage(&quot;\(value)\(value.isPalindrome() ? &quot;&quot; : &quot;不&quot;)是回文&quot;) break case .quit: isFinish = true break default: cons.writeMessage(&quot;Unknown option \(val)&quot;, to: .error) break &#125; &#125; &#125; 打印字体颜色转变我们需要err的打印文字是红色的 修改两个case 123456case .standard: print(&quot;\u&#123;001B&#125;[;m\(message)&quot;) breakcase .error: fputs(&quot;\u&#123;001B&#125;[0;31m\(message)\n&quot;, stderr) break 字体颜色汇总待续…]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Command</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[越狱开发(一)-准备]]></title>
    <url>%2F2018%2F09%2F30%2F%E8%B6%8A%E7%8B%B1%E5%BC%80%E5%8F%91-%E4%B8%80-%E5%87%86%E5%A4%87%2F</url>
    <content type="text"><![CDATA[什么是越狱,为什么越狱越狱即获取到手机的root权限,能够自由的安装和修改App,学习底层的相关知识 越狱的分类完美越狱和不完美越狱 不完美越狱 的不完美之处在于 不能关机! 关机之后需要重新越狱 完美越狱 只要不白苹果,不需要重新越狱 越狱手机准备越狱必须要有特定的设备,越狱是通过系统或者硬件的漏洞来获取超级权限,硬件的漏洞比较严重,硬件漏洞iOS更新到几都可以完美破解,目前就iPhone 3GS 是硬件漏洞 手机哪里买? 所有的二手手机商! 以上是废话,我实在360同城帮买的 如果需要筛选出自己的想要的iPhone(比如指定版本,指定手机类型,价格低于等,需要使用以下脚本) &lt;稍后补上&gt; 12 越狱待补充 Cydia介绍待补充 插件下载待补充 系统备份(重要)待补充 禁止更新待补充 小试身手要求: 将微信的Badge 设置为0 待补充]]></content>
      <categories>
        <category>越狱</category>
      </categories>
      <tags>
        <tag>越狱</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSharp学习二]]></title>
    <url>%2F2018%2F09%2F21%2FCSharp%E5%AD%A6%E4%B9%A0%E4%BA%8C%2F</url>
    <content type="text"></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSharp学习一]]></title>
    <url>%2F2018%2F09%2F20%2FCSharp%E5%AD%A6%E4%B9%A0%E4%B8%80%2F</url>
    <content type="text"><![CDATA[安装Visual Studio Code优点: 轻量级 官网下载最新版本 https://code.visualstudio.com/ .Net 和 C#.Net 一是指 微软提供的一整套平台, 二是指具体的.net.framework 运行库 C# 是依赖于net.framework的语言 Mac环境下 VS如何运行C#下载库dot net core 安装运行. 按照步骤一步步来即可 遇到的问题 运行下载下来的pkg文件报错,错误信息com.apple.installer.pagecontroller 错误 -1 包的签名有问题,https://www.microsoft.com/net/learn/get-started-with-dotnet-tutorial#macos Downloads 页面下载的包有问题 提示删除,非法来源 系统偏好设置.安全性与隐私.允许从以下位置下载的应用 选择任何来源 如果没有任何来源 字样 ,终端输入sudo spctl --master-disable 其他下载直接下载二进制包 下载包 https://www.microsoft.com/net/download/thank-you/dotnet-sdk-2.1.402-macos-x64-binaries 提取二进制文件以及依赖文件 dotnet 以及依赖host文件夹拷贝到/usr/local/bin/下,并且修改权限 chmod 777 dotnet 下载mono下载mono. mono 是.net跨平台的一套开源的微软.net全平台框架 https://www.mono-project.com/download/stable/ Hello World!重启命令行 dotnet new console -o myApp &amp; cd myApp dotnet run 配置VC Code终端控制台打印我运行调试的时候,终端和控制台来回打开,并且输入是,终端和控制台都无法接收输入信息 点击调试按钮旁边的齿轮, 出现launch.json 找到console 修改参数为 integratedTerminal 即可 参考文档在mac上使用VS Code编写C#应用程序https://www.jianshu.com/p/d8f63e1aef08 在mac上运行 mono https://blog.csdn.net/xzx_kag/article/details/78445894]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 开始写笔记]]></title>
    <url>%2F2018%2F09%2F20%2FHexo-%E5%BC%80%E5%A7%8B%E5%86%99%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[markdown 语法初阶待续 markdown 语法进阶待续 小Tips待续 图片大小 待补充 如何本地存储图片在hexo目录下运行 npm install hexo-asset-image --save 下载依赖 修改站点配置文件_config.yml 修改如下 12# post 可以添加图片post_asset_folder: true 对以前的文件添加同名目录,图片放在目录下即可方便引用 如何添加音乐和视频https://github.com/MoePlayer/hexo-tag-aplayerhttps://github.com/MoePlayer/hexo-tag-dplayer 参考文档https://github.com/CodeFalling/hexo-asset-image]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo实用工具]]></title>
    <url>%2F2018%2F09%2F18%2FHexo%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[##Cyberduck远程服务器连接工具 优点: 文件目录形式,比命令行直观 远程连接快速,可以添加书签快速登录 可以使用sublime编辑文件,实时保存 可以同时连接命令行,作为图形化操作的补充 可以查看log 简单好用的markdown图床工具https://www.jianshu.com/p/e46a91ae20b9 快速生成图片链接 所有云的对象存储也可以生成实现图片链接,但是有额度限制,超出收费]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT主题优化2]]></title>
    <url>%2F2018%2F09%2F13%2FHexo%20NexT%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%962%2F</url>
    <content type="text"><![CDATA[添加音乐登录 网易云音乐, 找到喜欢的音乐或者歌单,点击 生成外链播放器, 选择iframe 插件 选择 尺寸 , 播放模式, 复制html 代码,然后粘贴到你需要的文件中 比如我希望在侧栏的Links后面,所以粘贴到的位置是 /hexo/themes/next/layout/_macro/sidebar.swig 找到如下代码,粘贴在后面 123&#123;% include &apos;../_custom/sidebar.swig&apos; %&#125; &lt;/div&gt; &lt;/section&gt; Hexo 添加封面这里只讨论拥有服务器,和域名的情况 修改博客的域名解析为 blog.youdomain.com 在自己的服务器部署nginx,添加www的域名解析指向nginx,具体步骤可以看下面的网址 https://cloud.tencent.com/developer/labs/lab/10068 nginx 默认的地址是 usr/share/ngin/html/ 只需要修改index.html即可 里面的图片可以到http://fontawesome.dashgame.com/中查找,在前面加上fa_前缀即可 1&lt;i class=&quot;fa fa-youtube-play vhm-item&quot;&gt;&lt;/i&gt; 效果查看https://www.williamlovealisa.cn]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT主题优化]]></title>
    <url>%2F2018%2F09%2F12%2FHexo%20NexT%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[NexT 文档写的很好,如果有兴趣可以看看 本文的站点配置目录为 /hexo/_config.yml 主题配置目录为 /hexo/themes/next/_comfig.yml 首先安装主题安装主题12$ cd your-hexo-site$ git clone https://github.com/iissnan/hexo-theme-next themes/next 启用主题与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。 1theme: next 到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。 验证主题启动本地站点hexo s, 访问http://0.0.0.0:4000/ 切换主题的风格NexT 提供了三种风格方案(Scheme) Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 Mist - Muse 的紧凑版本，整洁有序的单栏外观 Pisces - 双栏 Scheme，小家碧玉似的清新 修改/themes/next/_config.yml文件中的Scheme, 选择需要的样式去掉# 123#scheme: Musescheme: Mist#scheme: Pisces 基本设置设置语言到站点配置文件,即hexo/_config.yml文件修改 1language: zh-Hans # 简体中文 修改中文名 到themes/next/languages/zh-Hans.yml 修改对应的中文 侧栏 设置侧栏的位置 12sidebar: position: left # 左侧显示 right 显示侧栏显示的时机，修改 sidebar.display 的值 12345sidebar:# always 在所有页面展示# hide 在所有页面隐藏# remove 完全消失 display: post # 在文章页面展示 头像修改theme/next/_config.yml 12345678# 完整URIavatar: http://example.com/avatar.png# 放到theme/next/source/images下avatar: /images/avatar.png# 放到theme/next/source/images下 作者昵称修改外层 _config.yml, 将 author 修改为你的昵称 站点描述修改外层 _config.yml, 将 description 修改为你喜欢的签名 关于图标所有图标的来源https://fontawesome.com/ 用法来源:http://fontawesome.dashgame.com/ 具体地址在themes/next/source/lib/font-awesome/ 下 导航栏标题和图片1234567891011121314# 导航栏条目,如果有新的条目要新增,在这里添加, || 后面是图标,图标参考上面的&lt;关于图标&gt;menu: home: / || home # 前面地址,后面是图标 tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive about: /about/ || user #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat# Enable/Disable menu icons.menu_icons: enable: true 然后新建tags, categories 以及about 页面 命令行分别输入下面三行,生成三个页面 123$ hexo new page tags$ hexo new page categories$ hexo new page about tags、categories页面需要设置类型 修改/hexo/source/tags/index.md 1234567---title: Tagsdate: 2017-09-07 17:17:32type: &quot;tags&quot;comments: false--- 修改/hexo/source/categories/index.md 1234567---title: categoriesdate: 2017-09-07 17:17:48type: &quot;categories&quot;comments: false--- about页面自己设置自我介绍,可以是个人简历等,自行编写markdown 公益404404 时帮助寻找失散的儿童,效果如下https://blog.williamlovealisa.cn/2018/09/12/Hex 使用方法，新建 404.html 页面，放到主题的 source 目录下，内容如下 123456789101112131415161718&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;script type=&quot;text/plain&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot; homePageName=&quot;回到我的主页&quot;&gt; &lt;/script&gt; &lt;script src=&quot;https://qzone.qq.com/gy/404/data.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://qzone.qq.com/gy/404/page.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 集成RSSRSS是什么?RSS是站点用来和其他站点之间共享内容的一种简易方式,他剔除掉无用内容,将有用的内容聚合成XML,便于分享 怎么做?首先安装依赖包,命令行输入 1$ npm install hexo-generator-feed --save 修改站点配置文件_config.yml 123456feed: # RSS订阅插件 type: atom path: atom.xml limit: 0plugins: hexo-generate-feed 修改主题配置文件_config.yml 1rss: /atom.xml 在Hexo根目录重新运行, 1$ hexo g -d 首页不显示全文有必要么非常有必要,除非你想所有的文本都展示到首页,那么首页将非常臃肿,内容太多,首页内容只需要简介即可 怎么做?修改主题配置目录 1234# 首页仅仅显示缩略内容,限制150个字符auto_excerpt: enable: true length: 150 首页本篇文章分块阴影打开 \themes\next\source\css\_custom\custom.styl 添加内容 12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 博客底部内容修改 12345678910111213141516171819202122232425# 博客底部显示内容footer: # Specify the date when the site was setup. # If not defined, current year will be used. # 创建该博客的时间,可以随意指定 since: 2018 # Icon between year and copyright info. # 博客版权信息之间的图标,这个是 ❉ 的图标 icon: snowflake-o # If not defined, will be used `author` from Hexo main config. # 版权,默认是博客的作者 copyright: # --------- # Hexo link (Powered by Hexo). # 显示Hexo强力驱动的信息,用了人家东西还是要讲点道德的... powered: true # 显示主题,主题的显示样式, 以及主题的版本号 theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: true # Version info of NexT after scheme info (vX.X.X). version: true 添加本地搜索功能在hexo 根目录,安装本地搜索 1$ npm install hexo-generator-searchdb --save 在站点配置文件 修改如下 123456#站内搜索search: path: search.xml field: post # 只搜索post类型的文件 format: html limit: 10000 # 最多10000条 在主题配置文件 修改如下 12345678910# Local search# Dependencies: https://github.com/flashlab/hexo-generator-search# 本地搜索local_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 添加侧边栏的社交链接修改主题配置目录 123456789101112131415161718192021# 这里都是自己不同平台的账号social: # 我的博客地址链接 GitHub: https://github.com/JXwilliamJi || github Coding: https://coding.net/u/Fastlane || random 简书: https://www.jianshu.com/u/a2e80deb11a1 || book CSDN: https://blog.csdn.net/qq_31092987 || rotate-right #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk StackOverflow: https://stackoverflow.com/users/8341797/william-ji || stack-overflow Segmentfault: https://segmentfault.com/u/feiyuqingcheng || facebook E-Mail: mailto:jxjmdx2009@163.com || envelope #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram # Skype: mailto://yourname?call|chat || skypesocial_icons: enable: true icons_only: false transition: false 修改侧边栏友情链接修改 主题配置目录 12345678910111213141516# Blog rolls 博客其他资料,其他人的链接links_icon: link # 图标links_title: Links # 标题名字#links_layout: blocklinks_layout: inline # 行内样式links: # 具体链接,格式如下 #Title: http://example.com/ iOS免费书籍资料: https://github.com/justjavac/free-programming-books-zh_CN 创造狮导航: http://www.chuangzaoshi.com/code 前端导航: http://www.alloyteam.com/nav/ 掘金酱: http://e.xitu.io/ Arduino: https://www.arduino.cn/ 树莓派: https://www.raspberrypi.org/ MacApp免费下载: https://www.waitsun.com/ MacApp会员制下载: http://www.ifunmac.com/ 微信支付宝打赏功能从微信/支付宝获取自己的二维码截图,编辑成合适大小,周边不留白 将图片放置到next主题下的source/images/ 下 修改 主题配置文件 1234# Reward 打赏功能reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！wechatpay: /images/Weichat.pngalipay: /images/AliPay.png 打赏功能修改,取消不停的抖动,改为抖动3次 打开 themes/next/source/css/_common/components/post/post-reward.styl 修改微信支付宝的样式如下 12345678910#wechat:hover p&#123; animation: roll 0.1s 3 linear; -webkit-animation: roll 0.1s 3 linear; -moz-animation: roll 0.1s 3 linear;&#125;#alipay:hover p&#123; animation: roll 0.1s 3 linear; -webkit-animation: roll 0.1s 3 linear; -moz-animation: roll 0.1s 3 linear;&#125; 第三方配置加速服务修改主题配置目录 的 vendors 属性 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758# Script Vendors.# Set a CDN address for the vendor you want to customize.# For example# mquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js# Be aware that you should use the same version as internal ones to avoid potential problems.# Please use the https protocol of CDN files when you enable https on your site.vendors: # Internal path prefix. Please do not edit it. _internal: lib # Internal version: 2.1.3 jquery: //cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js # Internal version: 2.1.5 # See: http://fancyapps.com/fancybox/ fancybox: //cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js fancybox_css: //cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css # Internal version: 1.0.6 # See: https://github.com/ftlabs/fastclick fastclick: //cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js # Internal version: 1.9.7 # See: https://github.com/tuupola/jquery_lazyload lazyload: //cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js # Internal version: 1.2.1 # See: http://VelocityJS.org velocity: //cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js # Internal version: 1.2.1 # See: http://VelocityJS.org velocity_ui: //cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js # Internal version: 0.7.9 # See: https://faisalman.github.io/ua-parser-js/ ua_parser: //cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js # Internal version: 4.6.2 # See: http://fontawesome.io/ fontawesome: //maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css # Internal version: 1 # https://www.algolia.com algolia_instant_js: algolia_instant_css: # Internal version: 1.0.2 # See: https://github.com/HubSpot/pace # Or use direct links below: # pace: //cdn.bootcss.com/pace/1.0.2/pace.min.js # pace_css: //cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css pace: //cdn.bootcss.com/pace/1.0.2/pace.min.js pace_css: //cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css # Internal version: 1.0.0 # https://github.com/hustcc/canvas-nest.js canvas_nest: //cdn.bootcss.com/canvas-nest.js/1.0.1/canvas-nest.min.js 访客统计和文章阅读量不蒜子统计修改 主题配置目录 123456789101112131415161718192021# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/# 显示每个文章的访问人数 ,卜算子busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site # 效果：本站访客数12345人次 site_uv: true site_uv_header: 本站访客数 site_uv_footer: 人次 # 效果：本文总阅读量12345次 # custom pv span for the whole site site_pv: false site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; site_pv_footer: 人次 # custom pv span for one page only page_pv: true page_pv_header: 本文总阅读量 page_pv_footer: LeanCloud统计数据比较靠谱,待续 文章字数统计修改主题配置目录 123456789# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcount# 字符统计功能post_wordcount: item_text: true wordcount: true min2read: true totalcount: false separated_meta: true 修改 \themes\next\layout\_macro\post.swig 找到 &lt;span class=&quot;leancloud-visitors-count&quot;&gt;&lt;/span&gt; 添加内容,最终代码如下 12345&#123;% endif %&#125; &lt;span class=&quot;leancloud-visitors-count&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;span&gt; 如果同时要在文章底部统计全站字数 修改 /themes/next/layout/_partials/footer.swig 找到 post-meta-divider 后面添加内容,最终代码如下 123456&lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;&lt;div class=&quot;theme-info&quot;&gt; &lt;span class=&quot;post-count&quot;&gt;Total Words:&#123;&#123; totalcount(site) &#125;&#125;&lt;/span&gt;&lt;/div&gt;&#123;% endif %&#125; 直接修改不会展示 需要安装下包 1$ yarn add hexo-wordcount OR 1$ npm i --save hexo-wordcount 添加评论新增评论模块综合比较,不需要用户登录的只有leancloud https://valine.js.org/hexo.html 基于 leancloud,已经集成进来了 修改 主题配置文件 12345678910valine: enable: true appid: tHQNEE9Bi6ywV3plQQE5XVEg-gzGzoHsz appkey: WEMokMM90vN6Jpw7R1r2tqNz notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: true # 是否有验证码校验 placeholder: ヾﾉ≧∀≦)o 来呀！快活呀！~ # 默认文字 avatar: mm # gravatar style # 默认头像 guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size 选择性关闭评论在 title 和 tag的同级目录添加如下,关系评论 comments: false 更优的做法是: 在scaffolds/post.md 以及 scaffolds/draft.md 文件下新增 comments: true,默认新增的post和draft都是支持评论的,且都有comments属性 站点顶部的加载条在 主题配置目录 搜索 pace,修改如下 1234567891011121314151617181920# Progress bar in the top during page loading.# 加载条,各种样式可选pace: true# Themes list:#pace-theme-big-counter#pace-theme-bounce#pace-theme-barber-shop#pace-theme-center-atom#pace-theme-center-circle#pace-theme-center-radar#pace-theme-center-simple#pace-theme-corner-indicator#pace-theme-fill-left#pace-theme-flash#pace-theme-loading-bar#pace-theme-mac-osx # 模仿mac#pace-theme-minimal # 加载的是一条细线# For example# pace_theme: pace-theme-center-simplepace_theme: pace-theme-minimal 修改文章链接的样式修改themes\next\source\css\_common\components\post\post.styl ,在文章末尾添加CSS 样式如下 1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125; 修改文章底部的标签样式修改 /themes/next/layout/_macro/post.swig 找到rel=&quot;tag&quot;&gt;# 修改为rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 文章底部添加结束标记在每一篇文章底部添加 -------------本文结束-------------文本 在 /themes/next/layout/_macro/ 下新建 passage-end-tag.swig,新增内容 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #555;font-size:14px;&quot;&gt;-------------本文结束-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 打开 \themes\next\layout\_macro\post.swig 搜索 END POST BODY,修改如下 123456789 &#123;#####################&#125; &#123;### END POST BODY ###&#125; &#123;#####################&#125; &lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;passage-end-tag.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 最后在主题配置文件末尾添加 123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 版权信息每篇文章底部的版权信息在 themes/next/layout/_macro/下添加 my-copyright.swig,新增内容 123456789101112131415161718192021222324252627282930&#123;% if page.copyright %&#125;&lt;div class=&quot;my_post_copyright&quot;&gt; &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script src=&quot;https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;&gt;&lt;/script&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class=&quot;copy-path&quot; title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot; aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt; &lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard(&apos;.fa-clipboard&apos;); $(&quot;.fa-clipboard&quot;).click(function()&#123; clipboard.on(&apos;success&apos;, function()&#123; swal(&#123; title: &quot;&quot;, text: &apos;复制成功&apos;, icon: &quot;success&quot;, showConfirmButton: true &#125;); &#125;); &#125;); &lt;/script&gt;&#123;% endif %&#125; 在 themes/next/source/css/_common/components/post/新增样式文件my-post-copyright.styl, 添加内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #b5b5b5; font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #a3d2a3; text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 修改 themes/next/layout/_macro/post.swig 搜索 END POST BODY,如果有上一条的结束标记,就在结束标记内容后,添加,这里可以选择加在打赏之前还是之后 123456&lt;!--版权信息--&gt; &lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;my-copyright.swig&apos; %&#125; &#123;% endif %&#125; &lt;/div&gt; 修改 themes/next/source/css/_common/components/post/post.styl 在最后一行引入样式表 @import “my-post-copyright” 修改默认样式 hexo根目录/scaffolds/post.md 以及 hexo根目录/scaffolds/draft.md 在title,tag同级添加内容如下 1copyright: true 这样每一篇默认都会有版权信息 复制的时候带入版权信息待处理 分享功能使用addthis 注册完找到Profile Options -&gt; General -&gt; ID 然后 到Tools -&gt; Add New Tool, 创建一个inline类型的样式 最后到主题配置文件,修改add_this_id 1234# Share 分享#jiathis: true# Warning: JiaThis does not support https. 实际支持httpsadd_this_id: &#123;your AddThis ID&#125; 背景动画 修改主题配置文件 ,需要什么动画,设置为true即可 1234567891011# Canvas-nest 连接线canvas_nest: false# three_waves 波浪线three_waves: false# canvas_lines 三维canvas_lines: true # canvas_sphere 三维球canvas_sphere: false 其他功能实现小心心❤️实现点击出现小心心,但是有鼠标双击无法选择单词的问题 在/themes/next/source/js/src 新建love.js 将love.js的内容拷贝到love.js中 找到 \themes\next\layout\_layout.swig 在末尾添加 1&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt; 代码高亮样式修改 主题配置文件 123456# Code Highlight theme# Available value:# normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-theme# 代码样式,normal 就是白底黑字, night 就是黑底highlight_theme: normal 小型代码块颜色修改 \themes\next\source\css\_variables\base.styl 中 $code-background和$code-foreground的值 12345678// Code &amp; Code Blocks// --------------------------------------------------$code-font-family = $font-family-monospace$code-font-size = 13px$code-font-size = unit(hexo-config(&apos;font.codes.size&apos;), px) if hexo-config(&apos;font.codes.size&apos;) is a &apos;unit&apos;$code-border-radius = 3px$code-foreground = $black-light$code-background = $gainsboro 文章添加Github快捷Github有两种样式: 三角和条形 选择喜欢的样式复制到 themes/next/layout/_layout.swig的 &lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;下面,并且修改href=&quot;&quot;为你自己的Github地址 调整 width和height 修改宽高 即可 文章加密在hexo根目录,输入 1$ npm install hexo-encrypt --save 配置 站点配置文件 ,末尾添加 123# 默认密码encrypt: password: 123456 修改 scaffolds/post.md 在--- 之间添加 12encrypt: falseenc_pwd: 123456 使用数学公式主要是一些数学公式方便引入 12345# MathJax Supportmathjax: enable: true per_page: false cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML 学习资料 https://mathjax-chinese-doc.readthedocs.io/en/latest/start.html 参考文档NexT 官方文档 图标库 Alvabill的简书 关于加密]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 简单美化]]></title>
    <url>%2F2018%2F09%2F12%2FHexo%20%E7%BE%8E%E5%8C%96%2F</url>
    <content type="text"><![CDATA[前言前一篇中基本搭建好Hexo博客框架,也能访问,默认使用的主题是landscope ,主题可配置内容较少 加个看板娘可以首先看看效果图, 官方中文文档具体已经介绍了如何使用,懒得看文档的至少看下效果图 首先加载动画模块npm install --save hexo-helper-live2d 添加代码在站点的_config 最后一行加入代码,注意缩进,不能有空格 12345678910111213141516live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-wanko display: position: right width: 150 height: 300 mobile: show: true 最重要的一步! 安装模型npm install 模型的包名 以上的代码如果要正确运行,需要安装wanko模型 npm install live2d-widget-model-wanko 重新部署hexo g -d 更多的模型官方文档中有很多其他模型,可以对照模型自己看看 首页内容缩略显示首页的内容如果多几篇,会发现,首页内容好多,内容完全展示出来了 这里介绍markdown 的解决办法在在编写markdown时,在需要的地方加上 &lt;!-- more --&gt; 即可精确截断 后面切换nexT 主题,会用到自动截断 这篇文章就是主题可配置内容较少 文本内容之后截断,可以查看效果]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何优雅的创建Hexo]]></title>
    <url>%2F2018%2F09%2F10%2F%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E5%88%9B%E5%BB%BAHexo%2F</url>
    <content type="text"><![CDATA[什么是Hexo官方的解释是: Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 为什么使用Hexo先看效果: 我的博客 点击 人图标 学习 在搭建的过程中,能够明显感觉到Hexo组件化的架构,高度自由定制化的操作,可以在搭建的过程中学习 简单 对于程序员来说,复杂的问题简单化是一个基本技能,也是基本需求 多平台,准入低 可以自由的在Mac,Linux,Windows 搭建 托管平台可以选择github, Coding 等很多托管平台 Markdown 友好型 对于经常编写markdown的人来说,使用一个原生支持markdown的博客框架是一个很Cool的事. 准备工作 电脑一台 [必须] 注册一个代码托管平台(Github,Coding等) [必须] 最好拥有一个自己的域名 [可选] 环境搭建安装Git环境 Linux环境 Ubuntu, Debian $ sudo apt-get install git-core Fedora, Red Hat, CentOS $ sudo yum install git-core Mac环境 $ brew install git Windows(谨慎) 下载安装,官方 下载并安装,百度云收录 安装node环境mac已经安装好node环境 Linux 和 Windows 遵循以下2步: 第一步 $ curl https://raw.github.com/creationix/nvm/master/install.sh | sh 或者 $ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh 第二步 $ nvm install stable 如果失败,访问http://nodejs.org/下载安装 Tips: node一般使用RVM(Node Version Manager) 安装和升级 node的包管理使用的npm(node package Manager) 下载安装package的 安装Hexo博客框架$ npm install hexo-cli -g 框架安装成功! Hexo需要放到哪里?目录名称叫什么? mac为例,我需要放到文稿下,创建Hexo目录 $ cd ~/Documents/ &amp;&amp; hexo init Hexo &amp;&amp; cd Hexo 开始安装依赖 $ npm install 查看目录结构 12345678.├── _config.yml --&gt; 配置文件,整体配置├── package.json --&gt; 依赖├── scaffolds --&gt; 模板,默认3个,可以自己定义├── source --&gt; 所有的资源文件| ├── _drafts --&gt; 根据drafts创建的草稿文件| └── _posts --&gt; 根据post模板创建的文件└── themes --&gt; 主题,重点修改,内部每个主题的_config.yml是具体配置 Hexo 的 Hello World简单配置Hexo配置文件: _config.yml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: WilliamJi&apos;s Blog # 站点名称subtitle: Coder can change world! # 副标题,有些主题不展示...比如Nextdescription: One minute on the stage needs ten years practice off stage! #自我介绍keywords: 个人博客 iOS # 关键词author: William Ji # 作者email: jxjmdx2009@163.com #你的联系邮箱language: zh_CN # 语言,支持的语言到主题 themes/landscope/language下找timezone: Asia/Shanghai # 时区,可不填# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://yoursite.com # 先不修改root: /permalink: :year/:month/:day/:title/ # 文章永久的链接格式,可添加.html结尾permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render: # 跳过渲染的文件 - README.md - CNAME# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: # Home page setting# path: Root path for your blogs index page. (default = &apos;&apos;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: &apos;&apos; per_page: 10 order_by: -date # Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/# 时间格式化类型date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions 主题## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape # 模式人landscape# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: 查看更多设置 查看效果$ hexo g &amp;&amp; hexo server -p 4000 tips: hexo g 是generate的意思,将.md文件根据配置文件生成预期的网页 hexo server 简写为hexo s也可以 -p 4000是指定端口,默认就是4000,可以直接 hexo s 注意命令行里面的提示语:Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 解释: 如果是远程服务器, localhost必须是具体的远程IP, 注意一定要使用ctrl+C 停止服务器,要不然端口4000就被占用! 解决端口占用的办法有3个: 重启终端 hexo server -p 换个端口 查看谁占用: lsof -i :4000 找到占用进程的PID填到后面的命令中 kill -9 PID 结束进程 可以不断修改配置_config.yml并且查看改动了启动服务器步骤: ctrl + c 关闭进程 hexo g &amp;&amp; hexo s tips : 关于命令A &amp;&amp; B意思是A成功的情况下执行B, A || B 是A失败的情况下执行B, A | B 是将A的输出当做B的输入,(A,B,C)是无论有没有切换上下文(目录),A,B,C都是在同一个上下文(目录)执行 Hexo 托管托管就是不仅仅在本地运行,上传到免费的托管平台,其他人也可以访问到 如果拥有远程服务器, hexo s 可以直接访问 ip:4000 访问 _config 部署介绍 Hexo 托管到Github大部分人的选择,代码是开源的 安装package$ npm install hexo-deployer-git --save 配置用户名和昵称将Github的用户名和昵称配上 $ git config --global user.name &quot;Your user.name&quot; $ git config --global user.email &quot;You user.email&quot; 配置SSH 秘钥在Hexo运行的环境上输入命令 user.email 输入Github的邮箱地址 ssh-keygen -t rsa -C user.email 保存的地址选择 /root/.ssh/id_rsa 然后回车 查看id_rsa.pub 的公钥信息 到Github公钥中 点击new ssh key 添加进去 创建托管仓库创建名称格式为(user.name).github.io的仓库,user.name 为Github的昵称 修改Hexo配置在 _config 中最后修改 1234deploy: type: git repo: git@github.com:(name)/(name).github.io.git #括号里面换成自己的用户名和仓库名,去掉括号 branch: master 部署生成文件并且部署: hexo g -d 然后访问 userName.github.io,比如我的 http://JXWilliamJi.github.io HTTPS到Github的Setting中 勾选 Enforce HTTPS 以后访问 https://JXWilliamJi.github.io 托管到Coding.netGithub免费账户不支持私有库,如果需要私有仓库必须付费,但是Coding.net免费用户支持私有库! 先去注册账号,https://coding.net/login 创建仓库,名称随意比如创建一个名称为william的项目 开启Pages服务找到代码-&gt;Pages 然后 点击 一键开启Pages 稍后看到如下信息 123访问地址Fastlane.coding.me/william部署时间2017-07-12 17:00:40部署版本b488bfa7b3 修改Hexo配置在 _config 中最后修改 1234deploy: type: git repo: git@git.coding.net:Fastlane/william.git branch: master 这里有个问题如果直接hexo g -d 看到的是没有样式的网页 一般的解决办法是推荐你买个域名,但是不用这么麻烦 在站点目录下 找到root,将域名后的文本添加上去 1234url: http://yoursite.comroot: /william # 修改这里permalink: :year/:month/:day/:title/permalink_defaults: 部署公钥在项目的设置里面找到 部署公钥 点击 新建部署公钥 将 id_rsa.pub 的公钥信息复制进去 重新部署hexo g -d https://Fastlane.coding.me/william 就能访问啦! 同时托管两个平台吃饱了撑的,但是可以做到 修改_config.xml 12url: http://yoursite.comroot: /william # 修改这里 12345678# 修改这个deploy:- type: git repo: git@github.com:(name)/(name).github.io.git #括号里面换成自己的用户名和仓库名,去掉括号 branch: master- type: git repo: git@github.com:(name)/(name).github.io.git #括号里面换成自己的用户名和仓库名,去掉括号 branch: master 或者换个语法 1234deploy: type: git repo: github: git@github.com:(name)/(name).github.io.git,master coding: git@github.com:(name)/(name).github.io.git,master 配置和单独配置相同 访问直接访问 (name).github.io/william 或者访问 Fastlane.coding.me/william 域名有了博客,最好买个域名,绑定域名更加高大上 Github:去自己的域名下添加解析记录类型为 CNAME 主机记录为 www/@ 线路选择默认，TTL 选择 600，记录值为 github 的仓库名 (name).github.io 主机记录可以选择www/@, www 访问的是https://www.domain.com @ 访问的是 https://domain.com 配置Hexocd hexo &amp;&amp; touch /source/CNAME 添加域名zhangsan.com 到 CNAME 中 重新部署 hexo g -d Coding.net方法和上面一样,选一个绑吧…没办法两个都绑 结语现在我们的博客可以使用了… 但是默认的主题不好看! 虽然能用,但是我们需要更加漂亮的外观和炫酷的视觉效果! 后面介绍如何优化以及使用主题 参考文档官方网站 https://hexo.io/zh-cn/ 部署Coding https://www.cnblogs.com/tengj/p/5352572.html]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
